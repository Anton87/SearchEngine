DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# load the classpath stored in the classpath.txt file.
# The classpath can be generated by using the (ClassPathPrint) class.

source $DIR/../classpath.txt
echo "DIR: $DIR"

# load settings from a config file
function load {
    if [ -z $1 ]; then
        echo "config file not specified"
        exit 1
    elif [ ! -f $1 ]; then
        echo "file $1 not found"
        exit 1
    fi
    echo -n "loading settings from file: $1... "; 
    source $1
    echo "done"    
}

# print the value of a var
function print {
    var_name="$1"
    echo "$var_name = \"${!var_name}\""
}

function index {
    echo "indexing..."
    
    echo "searchIndex = \"$searchIndex\""
    echo "doc = \"$doc\""
    echo "analyzer = \"$analyzer\""
    echo "docFilter = \"$docFilter\""
    
    echo "java -cp \$CLASSPATH it.unitn.nlpir.wiki.LuceneIndexer" 
    echo "     -index \"$searchIndex\""
    echo "     -doc \"$doc\""
    echo "     -analyzer \"$analyzer\""
    echo "     -docFilter \"$docFilter\""
    
    java -cp $CLASSPATH it.unitn.nlpir.wiki.LuceneIndexer -index "$searchIndex" -doc "$doc" -analyzer $analyzer -docFilter $docFilter    
    echo "done"
}

function clean {
    if [ -z "$searchIndex" ]; then
        echo "searchIndex not specified"
        exit 1
    elif [ ! -d "$searchIndex" ]; then
        echo "dir not found: $searchIndex"
        exit 1
    fi
    for f in "$searchIndex"/*; do
        if [ ! -z $f ] && [ -f $f ]; then  
            echo -n "removing file $f... "
            rm $f
            echo "done"
        fi
    done
}

function generateCandidates {
    questionsVarname=${1}"Questions"
    candidatesVarname=${1}"Candidates"
    questions=${!questionsVarname}
    candidates=${!candidatesVarname}
    echo "index = $searchIndex"
    echo "analyzer = $analyzer"
    echo "questions = $questions"    
    echo "maxHits = $maxHits"
    echo "candidates = $candidates"
    
    echo 
    
    java -cp $CLASSPATH it.unitn.nlpir.wiki.CandidateGenerator \
         -index "$searchIndex" \
         -analyzer $analyzer   \
         -questions $questions \
         -maxHits 100   \
         -candidates $candidates
}

function flagRelevants {
    patternsVarname="${1}Patterns"
    candidatesVarname="${1}Candidates"
    relevantCandidatesVarname="${1}RelevantCandidates"
    patterns="${!patternsVarname}"
    candidates="${!candidatesVarname}"
    relevantCandidates="${!relevantCandidatesVarname}"
    
    echo "patterns = $patterns"
    echo "candidates = $candidates"
    echo "relevantCandidates = $relevantCandidates"
    echo "patternlib = $patternlib"
    
    java -cp $CLASSPATH it.unitn.nlpir.wiki.RelevantFlagger \
         -patterns "$patterns" \
         -candidates "$candidates" \
         -relevantCandidates "$relevantCandidates" \
         -patternlib jregex
}

function treceval {
    if [ -z "$1" ]; then
        echo "usage: -treceval [train|test]"
        exit 1
    elif [ $1 != "train" ] && [ $1 != "test" ]; then
        echo "usage: -treceval [train|test]"
        exit 1
    fi
    
    candidatesVarname=${1}"Candidates"
    candidates="${!candidatesVarname}"
    relevantCandidatesVarname="${1}RelevantCandidates"
    relevantCandidates="${!relevantCandidatesVarname}"
    trueCandidates="${candidates%.*}.true.txt"  # file containing all candidate answers for questions with at least one positive example
    evalFileVarname=${1}"EvalFile"
    evalFile="${!evalFileVarname}"
    rel_file="${candidates%.*}.qrels.txt"  # needed for treceval
    top_file="${candidates%.*}.top.txt"  # needed for treceval
    echo "candidates = $candidates"
    echo "relevantCandidates = $relevantCandidates"
    echo "trueCandidates = $trueCandidates"
    echo "rel_file = $rel_file"
    echo "top_file = $top_file"
    echo "evalFile = $evalFile"
    awk -F "\t" 'FNR==NR{if ($5=="true"){a[$1]=$1}; next} {if ($1 in a){print $0}}' "$relevantCandidates" "$relevantCandidates" > "$trueCandidates"
    cat "$relevantCandidates" |   awk -F"\t" '{ gsub(/ +/, "_", $2); if($5=="true"){$5="1"}else{$5="0"}; print $1,"0",$2,$5 }' > "$rel_file"
    cat "$relevantCandidates" | awk -F"\t" 'BEGIN { OFS="\t" } { gsub(/ +/, "_", $2); print $1,"Q0",$2,$3,$4,"STANDARD" }' > "$top_file"
    eval "scripts/trec_eval-8.0/trec_eval -a $rel_file $top_file > $evalFile"
    #echo "pwd: $("pwd")"
}

function write {
    if [ -z "$1" ]; then
        echo "usage: -write [train|test]"
        exit 1
    elif [ $1 = "train" ] && [ $1 = "test" ]; then
        echo "usage: -write [train|test]"
        exit 1    
    fi
    if [ $1 = "train" ]; then
        echo "generateCandidates train"
        generateCandidates "train"
        flagRelevants "train"
    fi
    if [ $1 = "test" ]; then
        echo "generateCandidates test"
        generateCandidates "test"
        flagRelevants "test"
    fi
}


usage="usage: bash search_engine.sh [-load config_file][-index][-clean][-write train|test|*][-generateCandidates train|test][-flagRelevants train|test][-help]

where:
    -load      load the configuration file
    -print     print a variable's value
    -help      print this help
    -index     index the corpus (see -doc param in it.unitn.nlpir.wiki.LuceneIndexer)
    -clean     remove previous stored index
    -write     search candidate answers for train and test questions and write on file
    -generateCandidates
    -flagRelevants
    -eval
"

while [ -n "$(echo $1 | grep '-')" ]; do
    case $1 in
        -load ) echo '-process options -load'
            load "$2"
            shift;;  
        -print) echo '-process option -print'
            print "$2"
            shift;;
        -index) echo '-process option -index'
            index;;
        -clean) echo '-process option -clean'
            clean;;
        -write) echo '-process option -write'
            write "$2"
            shift;;
        -generateCandidates) echo '-process option -generateCandidates'
            generateCandidates "$2"
            shift;;
        -flagRelevants) echo '-process option -flagRelevants'
            flagRelevants "$2"
            shift;;
        -treceval) echo '-process option -treceval'
            treceval "$2"
            shift;;
    esac
    shift
done


